//
// proto definitions for MS3KOS 2.0 release
//
// each MS3KOS Mode implementation (src/Modes/*) can declare
// its own persistent protocol buffer values as needed.
// careful of putting too much stuff in here - i.e. use locals
// and consider the global pBuf entry as a 'use as needed'
// way to sync.
// 
// changes to this file propagate to the web interface,
// which generates the relevant GUI.
//
// MS3KOS also uses the protocol buffer for wire sync.
//

syntax = "proto2";

message RGB {
    // !J! safety orange TODO: s/255, 121, 0/ -> 0/
    required int32 R = 1 [default = 255];
    required int32 G = 2 [default = 121]; 
    required int32 B = 3 [default = 0];
}

message MIDI_SEQUENCE8 {
    required int32 STEP0 = 1 [default = 0];
    required int32 STEP1 = 2 [default = 0];
    required int32 STEP2 = 3 [default = 0];
    required int32 STEP3 = 4 [default = 0];
    required int32 STEP4 = 5 [default = 0];
    required int32 STEP5 = 6 [default = 0];
    required int32 STEP6 = 7 [default = 0];
    required int32 STEP7 = 8 [default = 0];
}

// MS3000 Global object
message MS3KG {

    message SysPref {
        message AP_INFO {
            optional string networkName = 1;
            optional string password = 2;
        }
    }
    
    optional App applications = 1;
    //optional AP_INFO apInfo = 2;

    message App {

        enum T {
            _MagicPov= 0;
            _Light= 1;
            _Magnet= 2;
            _System = 3;
            _Remote =4;
            _Beat= 5;
            _Countdown= 6;
            _Arpi = 7;
            _Sequi = 8;
        }

        optional T current = 1;

        optional MagicPov magicPov = 2;
        optional Light light = 3;
        optional Magnet magnet = 4;
        optional System system = 5; 
        optional Remote remote = 6;
        optional Beat beat = 7;
        optional Countdown countdown = 8;
        optional Arpi arpi = 9;
        optional Sequi sequi = 10;


        // MODE: magivPOV
        message MagicPov {
            optional string image = 1;
        }

        message Light {
            enum Mode {
                RAINBOW = 0;
                NORMAL = 1;
                SCANNER_RGB = 2;
                SCANNER_BW = 3;
            }

            optional Mode mode = 1 [ default = RAINBOW ];
            optional RGB color = 2;
            optional int32 colorIndex = 3;
        }


        message Magnet {
            enum Mode {
                BARS = 0;
                BARS_DOT = 1;
                DOTS = 2;
                OTHER = 3;
            }

            optional Mode mode = 1 [ default = BARS ];
        }

        message System {
            enum Mode {
                VERSION = 0;
                WIFI = 1;
                SSID = 2;
                IP = 3;
                SOFTIP = 4;
                POWER_LO = 5;
                POWER_HI = 6;
                POWER_VALUE = 7;
                CALIBRATION = 8;
            }

            optional Mode mode = 1 [ default = VERSION ];
        }

        message Remote {
        }

        message Beat {
            enum Mode {
                SIDE = 0;
                CENTER = 1;
            }

            optional Mode mode = 1 [ default = SIDE ];
            optional int32 sensitivity = 2 [ default = 2 ];
            optional RGB color = 3;
        }

        message Countdown { 

            enum Mode {
                DOWN_1S = 0;
                DOWN_5S = 1;
                DOWN_10S = 2;
                DOWN_30S = 3;
                DOWN_1M = 4;
                DOWN_5M = 5;
                DOWN_10M = 6;
                DOWN_30M = 7;
            }            

            optional Mode mode = 1 [ default = DOWN_1M ];

        }

        message Arpi {
            enum Mode {
                ARP1 = 0;
                ARP2 = 1;
                ARP3 = 2;
                ARP4 = 3;
                ARP5 = 4;
                ARP6 = 5;
                ARP7 = 6;
                ARP8 = 7;
            }

            optional Mode mode = 1 [ default = ARP8 ];

        }

        message Sequi {
            optional MIDI_SEQUENCE8 sequence = 1;
        }

    }
}

